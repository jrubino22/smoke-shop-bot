const playwright = require('playwright');
const browserType = 'chromium';
const { expect } = require('@playwright/test');
const fs = require('fs');

async function main() {
  let retryStrikes = 0;
  let retryStrikes2 = 0;
  const shopNameArray = [];
  const phoneNumArray = [];
  const addressArray = [];
  const websiteArray = [];

  // 10001, 10002, 10003, 10004, 10005, 10006, 10007, 10009, 10010, 10011, 10012,
  // 10013, 10014, 10015, 10016, 10017, 10018

  // 10019, 10020, 10021, 10022, 10023, 10024, 10025, 10026, 10027, 10028, 10029,
  // 10030, 10031, 10032, 10033, 10034, 10035, 10036, 10037, 10038, 10039, 10040,
  // 10041, 10044, 10045, 10048, 10055,

  // 10060, 10069, 10090, 10095, 10098, 10099, 10103, 10104, 10105, 10106, 10107,
  // 10110, 10111, 10112, 10115, 10118, 10119, 10120, 10121, 10122, 10123, 10128,

  const NyStateZipCodeArray = [
    00501, 00544, 10501, 10502, 10504, 10505, 10506, 10507, 10509, 10510, 10511,
    10512, 10514, 10516, 10518, 10520, 10522, 10523, 10524, 10526, 10527, 10528,
    10530, 10532, 10533, 10535, 10536, 10537, 10538, 10541, 10543, 10546, 10547,
    10548, 10549, 10550, 10552, 10553, 10560, 10562, 10566, 10567, 10570, 10573,
    10576, 10577, 10578, 10579, 10580, 10583, 10588, 10589, 10590, 10591, 10594,
    10595, 10597, 10598, 10601, 10603, 10604, 10605, 10606, 10607, 10701, 10703,
    10704, 10705, 10706, 10707, 10708, 10709, 10710, 10801, 10803, 10804, 10805,
    10901, 10911, 10913, 10916, 10917, 10918, 10919, 10920, 10921, 10923, 10924,
    10925, 10926, 10927, 10928, 10930, 10931, 10940, 10941, 10950, 10952, 10954,
    10956, 10958, 10960, 10962, 10963, 10964, 10965, 10968, 10969, 10970, 10973,
    10974, 10975, 10976, 10977, 10980, 10983, 10984, 10985, 10986, 10987, 10989,
    10990, 10992, 10993, 10994, 10996, 10998, 11001, 11003, 11010, 11020, 11021,
    11023, 11024, 11030, 11040, 11042, 11050, 11051, 11052, 11053, 11054, 11055,
    11096, 11437, 11501, 11507, 11509, 11510, 11514, 11516, 11518, 11520, 11530,
    11542, 11545, 11548, 11549, 11550, 11552, 11553, 11554, 11555, 11556, 11557,
    11558, 11559, 11560, 11561, 11563, 11565, 11566, 11568, 11570, 11572, 11575,
    11576, 11577, 11579, 11580, 11581, 11590, 11596, 11598, 11599, 11701, 11702,
    11703, 11704, 11705, 11706, 11709, 11710, 11713, 11714, 11715, 11716, 11717,
    11718, 11719, 11720, 11721, 11722, 11724, 11725, 11726, 11727, 11729, 11730,
    11731, 11732, 11733, 11735, 11737, 11738, 11740, 11741, 11742, 11743, 11746,
    11747, 11749, 11751, 11752, 11753, 11754, 11755, 11756, 11757, 11758, 11762,
    11763, 11764, 11765, 11766, 11767, 11768, 11769, 11771, 11772, 11773, 11775,
    11776, 11777, 11778, 11779, 11780, 11782, 11783, 11784, 11786, 11787, 11788,
    11789, 11790, 11791, 11792, 11793, 11794, 11795, 11796, 11797, 11798, 11801,
    11803, 11804, 11815, 11853, 11901, 11933, 11934, 11935, 11937, 11939, 11940,
    11941, 11942, 11944, 11946, 11948, 11949, 11950, 11951, 11952, 11953, 11954,
    11955, 11957, 11958, 11961, 11963, 11967, 11968, 11971, 11976, 11977, 11978,
    11980, 12007, 12008, 12009, 12010, 12015, 12016, 12017, 12018, 12019, 12020,
    12022, 12023, 12024, 12025, 12027, 12028, 12029, 12031, 12032, 12033, 12035,
    12036, 12037, 12041, 12042, 12043, 12046, 12047, 12051, 12052, 12053, 12054,
    12055, 12056, 12057, 12058, 12059, 12060, 12061, 12062, 12063, 12064, 12065,
    12066, 12067, 12068, 12070, 12071, 12072, 12074, 12075, 12076, 12077, 12078,
    12083, 12084, 12085, 12086, 12087, 12090, 12092, 12093, 12094, 12095, 12106,
    12108, 12110, 12115, 12116, 12117, 12118, 12120, 12121, 12122, 12123, 12125,
    12130, 12131, 12134, 12136, 12137, 12138, 12139, 12140, 12143, 12144, 12147,
    12148, 12149, 12150, 12151, 12153, 12154, 12155, 12156, 12157, 12158, 12159,
    12160, 12164, 12165, 12166, 12167, 12168, 12169, 12170, 12173, 12175, 12176,
    12180, 12182, 12183, 12184, 12185, 12186, 12187, 12188, 12189, 12190, 12192,
    12193, 12194, 12196, 12197, 12198, 12202, 12203, 12204, 12205, 12206, 12207,
    12208, 12209, 12210, 12211, 12214, 12222, 12223, 12226, 12227, 12228, 12229,
    12230, 12231, 12232, 12233, 12234, 12235, 12236, 12237, 12238, 12239, 12240,
    12241, 12242, 12243, 12244, 12245, 12246, 12247, 12248, 12249, 12250, 12255,
    12257, 12260, 12261, 12288, 12302, 12303, 12304, 12305, 12306, 12307, 12308,
    12309, 12345, 12401, 12404, 12405, 12406, 12407, 12409, 12410, 12411, 12412,
    12413, 12414, 12416, 12418, 12419, 12421, 12422, 12423, 12424, 12427, 12428,
    12430, 12431, 12433, 12434, 12435, 12439, 12440, 12442, 12443, 12444, 12446,
    12448, 12449, 12450, 12451, 12454, 12455, 12456, 12457, 12458, 12460, 12461,
    12463, 12464, 12465, 12466, 12468, 12469, 12470, 12472, 12473, 12474, 12477,
    12480, 12481, 12482, 12484, 12485, 12486, 12487, 12491, 12492, 12494, 12495,
    12496, 12498, 12501, 12502, 12503, 12507, 12508, 12513, 12514, 12515, 12516,
    12517, 12518, 12520, 12521, 12522, 12523, 12524, 12525, 12526, 12528, 12529,
    12531, 12533, 12534, 12538, 12540, 12542, 12543, 12545, 12546, 12547, 12548,
    12549, 12550, 12553, 12561, 12563, 12564, 12565, 12566, 12567, 12569, 12570,
    12571, 12572, 12575, 12577, 12578, 12580, 12581, 12582, 12583, 12585, 12586,
    12589, 12590, 12592, 12594, 12601, 12603, 12604, 12701, 12719, 12720, 12721,
    12723, 12725, 12726, 12727, 12729, 12732, 12733, 12734, 12736, 12737, 12738,
    12740, 12741, 12742, 12743, 12745, 12746, 12747, 12748, 12750, 12751, 12752,
    12754, 12758, 12759, 12760, 12762, 12763, 12764, 12765, 12766, 12768, 12770,
    12771, 12775, 12776, 12777, 12779, 12780, 12783, 12786, 12787, 12788, 12789,
    12790, 12791, 12792, 12801, 12803, 12804, 12808, 12809, 12810, 12812, 12814,
    12815, 12816, 12817, 12819, 12821, 12822, 12823, 12824, 12827, 12828, 12831,
    12832, 12833, 12834, 12835, 12836, 12837, 12838, 12839, 12842, 12843, 12844,
    12845, 12846, 12847, 12849, 12850, 12851, 12852, 12853, 12854, 12855, 12857,
    12858, 12859, 12860, 12861, 12863, 12864, 12865, 12866, 12870, 12871, 12873,
    12874, 12878, 12879, 12883, 12885, 12886, 12887, 12901, 12903, 12910, 12911,
    12912, 12913, 12914, 12916, 12917, 12918, 12919, 12920, 12921, 12922, 12923,
    12924, 12926, 12928, 12930, 12932, 12934, 12935, 12936, 12937, 12941, 12942,
    12943, 12944, 12945, 12946, 12949, 12950, 12952, 12953, 12955, 12956, 12957,
    12958, 12959, 12960, 12961, 12962, 12964, 12965, 12966, 12967, 12969, 12970,
    12972, 12974, 12978, 12979, 12980, 12981, 12983, 12985, 12986, 12987, 12989,
    12992, 12993, 12996, 12997, 12998, 13021, 13024, 13026, 13027, 13028, 13029,
    13030, 13031, 13032, 13033, 13034, 13035, 13036, 13037, 13039, 13040, 13041,
    13042, 13044, 13045, 13052, 13053, 13054, 13057, 13060, 13061, 13063, 13066,
    13068, 13069, 13071, 13072, 13073, 13074, 13076, 13077, 13078, 13080, 13081,
    13082, 13083, 13084, 13088, 13090, 13092, 13101, 13103, 13104, 13108, 13110,
    13111, 13112, 13114, 13116, 13118, 13120, 13122, 13124, 13126, 13131, 13132,
    13135, 13136, 13140, 13141, 13142, 13143, 13144, 13145, 13146, 13147, 13148,
    13152, 13155, 13156, 13158, 13159, 13160, 13164, 13165, 13166, 13167, 13202,
    13203, 13204, 13205, 13206, 13207, 13208, 13209, 13210, 13211, 13212, 13214,
    13215, 13219, 13224, 13225, 13244, 13250, 13251, 13252, 13301, 13302, 13303,
    13304, 13308, 13309, 13310, 13314, 13315, 13316, 13317, 13318, 13319, 13320,
    13322, 13323, 13324, 13325, 13326, 13327, 13328, 13329, 13331, 13332, 13333,
    13334, 13335, 13337, 13338, 13339, 13340, 13342, 13343, 13345, 13346, 13348,
    13350, 13354, 13355, 13357, 13360, 13361, 13363, 13365, 13367, 13368, 13402,
    13403, 13406, 13407, 13408, 13409, 13411, 13413, 13415, 13416, 13417, 13418,
    13420, 13421, 13424, 13425, 13428, 13431, 13433, 13436, 13437, 13438, 13439,
    13440, 13441, 13449, 13450, 13452, 13454, 13456, 13459, 13460, 13461, 13464,
    13465, 13468, 13469, 13470, 13471, 13473, 13475, 13476, 13477, 13478, 13480,
    13482, 13483, 13485, 13486, 13488, 13489, 13490, 13491, 13492, 13493, 13494,
    13495, 13501, 13502, 13599, 13601, 13602, 13603, 13605, 13606, 13607, 13608,
    13612, 13613, 13614, 13616, 13617, 13618, 13619, 13620, 13621, 13622, 13624,
    13625, 13626, 13630, 13633, 13634, 13635, 13636, 13637, 13638, 13639, 13640,
    13642, 13646, 13648, 13650, 13652, 13654, 13655, 13656, 13658, 13659, 13660,
    13661, 13662, 13664, 13665, 13667, 13668, 13669, 13670, 13672, 13673, 13675,
    13676, 13679, 13680, 13681, 13682, 13684, 13685, 13687, 13690, 13691, 13693,
    13694, 13696, 13697, 13699, 13730, 13731, 13732, 13733, 13734, 13736, 13739,
    13740, 13743, 13744, 13746, 13748, 13750, 13751, 13752, 13753, 13754, 13755,
    13756, 13757, 13760, 13775, 13776, 13777, 13778, 13780, 13782, 13783, 13786,
    13787, 13788, 13790, 13795, 13796, 13797, 13801, 13802, 13803, 13804, 13806,
    13807, 13808, 13809, 13810, 13811, 13812, 13813, 13815, 13820, 13825, 13826,
    13827, 13830, 13832, 13833, 13834, 13835, 13838, 13839, 13841, 13842, 13843,
    13844, 13846, 13849, 13850, 13856, 13859, 13861, 13862, 13863, 13864, 13865,
    13901, 13903, 13904, 13905, 14001, 14004, 14005, 14006, 14008, 14009, 14011,
    14012, 14013, 14020, 14024, 14025, 14026, 14028, 14030, 14031, 14032, 14033,
    14034, 14036, 14037, 14039, 14040, 14041, 14042, 14043, 14047, 14048, 14051,
    14052, 14054, 14055, 14057, 14058, 14059, 14060, 14062, 14063, 14065, 14066,
    14067, 14068, 14069, 14070, 14072, 14075, 14080, 14081, 14082, 14083, 14085,
    14086, 14091, 14092, 14094, 14098, 14101, 14102, 14103, 14105, 14108, 14111,
    14113, 14120, 14125, 14127, 14129, 14131, 14132, 14134, 14136, 14138, 14139,
    14141, 14143, 14144, 14145, 14150, 14167, 14170, 14171, 14172, 14174, 14201,
    14202, 14203, 14204, 14206, 14207, 14208, 14209, 14210, 14211, 14212, 14213,
    14214, 14215, 14216, 14217, 14218, 14219, 14220, 14221, 14222, 14223, 14224,
    14225, 14226, 14227, 14228, 14233, 14241, 14260, 14261, 14263, 14264, 14265,
    14267, 14269, 14270, 14272, 14273, 14276, 14280, 14301, 14303, 14304, 14305,
    14411, 14414, 14415, 14416, 14418, 14420, 14422, 14423, 14424, 14425, 14427,
    14428, 14432, 14433, 14435, 14437, 14441, 14445, 14450, 14454, 14456, 14462,
    14464, 14466, 14467, 14468, 14469, 14470, 14471, 14472, 14475, 14476, 14477,
    14478, 14479, 14480, 14481, 14482, 14485, 14486, 14487, 14489, 14502, 14504,
    14505, 14506, 14507, 14510, 14512, 14513, 14514, 14516, 14517, 14519, 14521,
    14522, 14525, 14526, 14527, 14530, 14532, 14533, 14534, 14536, 14541, 14543,
    14544, 14545, 14546, 14548, 14550, 14551, 14555, 14559, 14560, 14561, 14564,
    14568, 14569, 14571, 14572, 14580, 14585, 14586, 14589, 14590, 14591, 14604,
    14605, 14606, 14607, 14608, 14609, 14610, 14611, 14612, 14613, 14614, 14615,
    14616, 14617, 14618, 14619, 14620, 14621, 14622, 14623, 14624, 14625, 14626,
    14638, 14639, 14642, 14643, 14644, 14646, 14647, 14649, 14650, 14651, 14652,
    14653, 14694, 14701, 14706, 14708, 14709, 14710, 14711, 14712, 14714, 14715,
    14716, 14717, 14718, 14719, 14721, 14723, 14724, 14726, 14727, 14728, 14729,
    14731, 14733, 14735, 14736, 14737, 14738, 14739, 14740, 14741, 14743, 14744,
    14747, 14748, 14750, 14753, 14754, 14755, 14757, 14760, 14767, 14769, 14770,
    14772, 14775, 14777, 14779, 14781, 14782, 14784, 14787, 14801, 14802, 14803,
    14804, 14805, 14806, 14807, 14808, 14809, 14810, 14812, 14813, 14814, 14815,
    14816, 14817, 14818, 14819, 14820, 14821, 14822, 14823, 14824, 14825, 14826,
    14830, 14831, 14836, 14837, 14838, 14839, 14840, 14841, 14842, 14843, 14845,
    14846, 14847, 14850, 14853, 14855, 14858, 14859, 14860, 14861, 14864, 14865,
    14867, 14869, 14870, 14871, 14872, 14873, 14874, 14877, 14878, 14879, 14880,
    14881, 14882, 14883, 14884, 14885, 14886, 14889, 14891, 14892, 14894, 14895,
    14897, 14898, 14901, 14903, 14904, 14905,
  ];

  const LaCountyZipCodeArray = [
    90001, 90002, 90003, 90004, 90005, 90006, 90007, 90008, 90010, 90011, 90012,
    90013, 90014, 90015, 90016, 90017, 90018, 90019, 90020, 90021, 90022, 90023,
    90024, 90025, 90026, 90027, 90028, 90029, 90031, 90032, 90033, 90034, 90035,
    90036, 90037, 90038, 90039, 90040, 90041, 90042, 90043, 90044, 90045, 90046,
    90047, 90048, 90049, 90056, 90057, 90058, 90059, 90061, 90062, 90063, 90064,
    90065, 90066, 90067, 90068, 90069, 90071, 90074, 90077, 90079, 90084, 90088,
    90089, 90094, 90095, 90096, 90099, 90134, 90189, 90201, 90210, 90211, 90212,
    90220, 90221, 90222, 90230, 90232, 90240, 90241, 90242, 90245, 90247, 90248,
    90249, 90250, 90254, 90255, 90260, 90261, 90262, 90263, 90265, 90266, 90270,
    90272, 90274, 90275, 90277, 90278, 90280, 90290, 90291, 90292, 90293, 90301,
    90302, 90303, 90304, 90305, 90311, 90401, 90402, 90403, 90404, 90405, 90501,
    90502, 90503, 90504, 90505, 90506, 90601, 90602, 90603, 90604, 90605, 90606,
    90638, 90639, 90640, 90650, 90660, 90670, 90701, 90703, 90706, 90710, 90712,
    90713, 90715, 90716, 90717, 90723, 90731, 90732, 90744, 90745, 90746, 90747,
    90755, 90802, 90803, 90804, 90805, 90806, 90807, 90808, 90810, 90813, 90814,
    90815, 90822, 90831, 90833, 90840, 90842, 90844, 90846, 90847, 90848, 90895,
    91001, 91006, 91007, 91008, 91010, 91011, 91016, 91020, 91024, 91030, 91040,
    91042, 91101, 91103, 91104, 91105, 91106, 91107, 91108, 91110, 91121, 91123,
    91124, 91125, 91126, 91129, 91182, 91184, 91185, 91188, 91189, 91199, 91201,
    91202, 91203, 91204, 91205, 91206, 91207, 91208, 91210, 91214, 91301, 91302,
    91303, 91304, 91306, 91307, 91311, 91316, 91321, 91324, 91325, 91326, 91329,
    91330, 91331, 91335, 91340, 91342, 91343, 91344, 91345, 91350, 91351, 91352,
    91354, 91355, 91356, 91364, 91367, 91371, 91381, 91382, 91383, 91384, 91387,
    91390, 91401, 91402, 91403, 91405, 91406, 91411, 91423, 91436, 91470, 91482,
    91495, 91496, 91499, 91501, 91502, 91504, 91505, 91506, 91521, 91522, 91523,
    91526, 91601, 91602, 91604, 91605, 91606, 91607, 91608, 91611, 91612, 91702,
    91706, 91711, 91722, 91723, 91724, 91731, 91732, 91733, 91735, 91740, 91741,
    91744, 91745, 91746, 91748, 91750, 91754, 91755, 91756, 91765, 91766, 91767,
    91768, 91770, 91771, 91772, 91773, 91775, 91776, 91780, 91789, 91790, 91791,
    91792, 91801, 91803, 91804, 93510, 93532, 93534, 93535, 93536, 93543, 93544,
    93550, 93551, 93552, 93553, 93563, 93591, 93599,
  ];
  // 10151, 10152, 10153, 10154, 10155, 10158, 10161, 10162, 10165, 10166, 10167,
  // 10168, 10169, 10170, 10171, 10172, 10173, 10174, 10175, 10176, 10177, 10178,
  // 10199, 10270, 10271, 10278, 10279, 10280, 10281, 10282, 10451, 10452, 10453,
  // 10454, 10455, 10456, 10457, 10458, 10459, 10460, 10461, 10462, 10463, 10464,
  // 10465, 10466, 10467, 10468, 10469, 10470, 10471, 10472, 10473, 10474, 10475,
  // 11201, 11203, 11204, 11205, 11206, 11207, 11208, 11209, 11210, 11211, 11212,
  // 11213, 11214, 11215, 11216, 11217, 11218, 11219, 11220, 11221, 11222, 11223,
  // 11224, 11225, 11226, 11228, 11229, 11230, 11231, 11232, 11233, 11234, 11235,
  // 11236, 11237, 11238, 11239, 11241, 11242, 11243, 11249, 11252, 11256,

  const zipCodeArray = [
    80015, 80003, 80004, 80005, 80007, 80010, 80011, 80012, 80013, 80014, 80015,
    80016, 80017, 80018, 80019, 80020, 80021, 80022, 80023, 80026, 80027, 80030,
    80031, 80033, 80045, 80101, 80102, 80103, 80104, 80105, 80106, 80107, 80108,
    80109, 80110, 80111, 80112, 80113, 80116, 80117, 80118, 80120, 80121, 80122,
    80123, 80124, 80125, 80126, 80127, 80128, 80129, 80130, 80132, 80133, 80134,
    80136, 80138, 80165, 80166, 80202, 80203, 80204, 80205, 80206, 80135, 80207,
    80208, 80209, 80210, 80211, 80212, 80214, 80215, 80216, 80218, 80219, 80220,
    80221, 80222, 80223, 80224, 80226, 80227, 80228, 80229, 80230, 80231, 80232,
    80233, 80234, 80235, 80236, 80237, 80238, 80239, 80241, 80243, 80244, 80246,
    80247, 80249, 80256, 80257, 80259, 80260, 80261, 80263, 80264, 80265, 80266,
    80271, 80273, 80274, 80281, 80290, 80291, 80293, 80294, 80299, 80301, 80302,
    80303, 80304, 80305, 80309, 80310, 80314, 80401, 80403, 80419, 80421, 80422,
    80423, 80424, 80428, 80430, 80433, 80435, 80439, 80440, 80446, 80447, 80449,
    80452, 80455, 80456, 80459, 80461, 80463, 80465, 80466, 80467, 80468, 80470,
    80480, 80481, 80487, 80498, 80501, 80503, 80504, 80510, 80512, 80513, 80514,
    80515, 80516, 80517, 80521, 80523, 80524, 80525, 80526, 80528, 80530, 80534,
    80535, 80536, 80537, 80538, 80540, 80542, 80543, 80545, 80547, 80549, 80550,
    80551, 80553, 80601, 80602, 80603, 80610, 80611, 80612, 80615, 80620, 80621,
    80622, 80624, 80631, 80634, 80638, 80639, 80640, 80642, 80643, 80644, 80645,
    80648, 80649, 80650, 80651, 80652, 80653, 80654, 80701, 80705, 80720, 80721,
    80722, 80723, 80726, 80727, 80728, 80729, 80731, 80733, 80734, 80735, 80736,
    80737, 80740, 80741, 80742, 80743, 80744, 80745, 80746, 80747, 80749, 80750,
    80751, 80754, 80755, 80757, 80758, 80759, 80801, 80802, 80804, 80805, 80807,
    80808, 80809, 80810, 80812, 80813, 80814, 80815, 80816, 80817, 80818, 80820,
    80821, 80822, 80823, 80824, 80825, 80826, 80827, 80828, 80829, 80830, 80831,
    80832, 80833, 80834, 80835, 80836, 80840, 80861, 80863, 80864, 80902, 80903,
    80904, 80905, 80906, 80907, 80908, 80909, 80910, 80911, 80912, 80913, 80915,
    80916, 80917, 80918, 80919, 80920, 80921, 80922, 80923, 80924, 80925, 80926,
    80927, 80928, 80929, 80930, 80938, 80939, 80941, 80942, 80946, 80947, 80950,
    80951, 80977, 80995, 80997, 81001, 81003, 81004, 81005, 81006, 81007, 81008,
    81009, 81010, 81011, 81012, 81020, 81021, 81022, 81023, 81024, 81025, 81027,
    81029, 81034, 81036, 81039, 81040, 81041, 81044, 81045, 81047, 81049, 81050,
    81052, 81054, 81055, 81057, 81058, 81059, 81062, 81063, 81064, 81067, 81069,
    81071, 81073, 81076, 81081, 81082, 81084, 81089, 81090, 81091, 81092, 81101,
    81102, 81120, 81122, 81123, 81125, 81130, 81132, 81133, 81136, 81137, 81140,
    81143, 81144, 81146, 81147, 81149, 81151, 81152, 81154, 81155, 81201, 81210,
    81211, 81212, 81220, 81223, 81224, 81226, 81228, 81230, 81231, 81233, 81235,
    81236, 81237, 81239, 81240, 81243, 81251, 81252, 81253, 81290, 81301, 81303,
    81320, 81321, 81323, 81324, 81325, 81326, 81327, 81328, 81331, 81335, 81401,
    81403, 81410, 81411, 81413, 81415, 81416, 81418, 81419, 81422, 81424, 81425,
    81428, 81431, 81432, 81434, 81435, 81501, 81503, 81504, 81505, 81506, 81507,
    81520, 81521, 81522, 81523, 81524, 81525, 81526, 81527, 81601, 81610, 81611,
    81621, 81623, 81624, 81625, 81630, 81632, 81633, 81635, 81637, 81638, 81639,
    81640, 81641, 81642, 81647, 81648, 81650, 81652, 81653, 81654, 81657,
  ];
  // { headless: false }

  async function iteration1(zipCode) {
    console.log('index', zipCode);
    if (zipCode < zipCodeArray.length) {
      const browser = await playwright[browserType].launch();
      const context = await browser.newContext();
      const page = await context.newPage();
      await page.goto('http://google.com');
      await page.waitForLoadState('load');

      const searchTerm = `smoke vape shop in zip code ${zipCodeArray[zipCode]}`;
      const input = page.locator('input[name="q"]');

      await input.fill(searchTerm);
      await page.waitForTimeout(2000);
      await input.press('Enter');

      const links = page.locator('a[data-hveid="CAEQAw"]');
      console.log('retryStrikes1', retryStrikes);
      try {
        await links.click();
        await page.waitForLoadState('load');
        for (i = 0; i < 4; i++) {
          await page.locator('div[role="feed"]').evaluate((e) => {
            e.scrollTop = e.scrollHeight;
          });
          await page.waitForTimeout(500);
        }
        retryStrikes = 0;
      } catch {
        await browser.close();
        retryStrikes++;
        if (retryStrikes > 6) {
          retryStrikes = 0;
          return await iteration1(zipCode + 1);
        } else {
          return await iteration1(zipCode);
        }
      }

      await page.waitForTimeout(1000);
      const storeContainer = page.locator('[role="article"]');
      const count = await storeContainer.count();
      console.log('count', count);

      //////////////////  Shop Iterator
      // for (let i = 0; i < count; i++) {

      async function iterator2(i) {
        if (i < count) {
          await storeContainer.nth(i).locator('a').nth(0).click();
          await page.waitForTimeout(300);
          const main = page.locator('div[role="main"]');
          const storeTester = await storeContainer
            .nth(i)
            .getAttribute('aria-label');

          let tries = 0;
          try {
            async function checkStores() {
              if (
                await (storeTester !==
                  (await main.nth(1).getAttribute('aria-label')))
              ) {
                tries++;
                if (tries < 12) {
                  console.log(tries);
                  console.log(await main.nth(1).getAttribute('aria-label'));
                  await page.waitForTimeout(150);
                  return await checkStores();
                } else {
                  return await iterator2(i + 1);
                }
              } else {
                const addressEl = page.locator(
                  'button[data-item-id="address"]'
                );
                const phoneNumEl = page.locator(
                  'button[data-tooltip="Copy phone number"]'
                );
                const websiteEl = page.locator(
                  'a[data-tooltip="Open website"]'
                );

                if ((await main.count()) > 0) {
                  shopNameArray.push(
                    `"${await main.nth(1).getAttribute('aria-label')}"`
                  );
                } else {
                  shopNameArray.push(`"Smoke Shop"`);
                }
                if ((await addressEl.count()) > 0) {
                  addressArray.push(
                    `"${await addressEl.nth(0).textContent()}"`
                  );
                } else {
                  addressArray.push(`"Not Listed"`);
                }
                if ((await phoneNumEl.count()) > 0) {
                  phoneNumArray.push(
                    `"${await phoneNumEl.nth(0).textContent()}"`
                  );
                } else {
                  phoneNumArray.push(`"Not Listed"`);
                }
                if ((await websiteEl.count()) > 0) {
                  websiteArray.push(
                    `"${await websiteEl.nth(0).getAttribute('href')}"`
                  );
                } else {
                  websiteArray.push(`"Not Listed"`);
                }
              }
              await iterator2(i + 1);
            }
            await checkStores();
          } catch {
            return await iteration1(zipCode + 1);
          }
        } else {
          await page.waitForTimeout(300);
          await browser.close();
          await iteration1(zipCode + 1);
        }
      }
      await iterator2(0);
    } else {
      console.log('shop names', shopNameArray);
      console.log('phone Numbers', phoneNumArray);
      console.log('addresses', addressArray);
      console.log('websites', websiteArray);

      const headers = ['Name', 'Phone Number', 'Address', 'website'];
      const columns = [
        shopNameArray,
        phoneNumArray,
        addressArray,
        websiteArray,
      ];

      function csvRows(headers, columns) {
        const output = [headers];
        const numRows = columns
          .map((col) => col.length)
          .reduce((a, b) => Math.max(a, b));

        for (let row = 0; row < numRows; row++) {
          output.push(columns.map((c) => c[row] || ''));
        }

        const uniqueOutput = Array.from(
          new Set(output.map(JSON.stringify)),
          JSON.parse
        );

        return uniqueOutput;
      }

      function csvString(data) {
        let output = '';
        data.forEach((row) => (output += row.join(',') + '\n'));
        return output;
      }

      function csvConstructor(headers, columns) {
        return csvString(csvRows(headers, columns));
      }

      fs.appendFile(
        `test.csv`,
        csvConstructor(headers, columns),
        function (err) {
          if (err) throw err;
        }
      );
    }
  }
  iteration1(0);
}

main();
// 154

// try {
//   console.log('strikes', retryStrikes2);
//   console.log('index', zipCode);
//   for (let i = 0; i < count; i++) {
//     const c = storeContainer.nth(i).locator('[jstcache="154"]');
//     const n = await c.count();
//     const phoneNum1 = await storeContainer
//       .nth(i)
//       .locator('[jstcache="154"]')
//       .nth(n - 1)
//       .textContent();

//     const phoneNum2 = await storeContainer
//       .nth(i)
//       .locator('[jstcache="154"]')
//       .nth(1)
//       .textContent();

//     const regex =
//       /^\s*(?:\+?(\d{1,3}))?[-. (]*(\d{3})[-. )]*(\d{3})[-. ]*(\d{4})(?: *x(\d+))?\s*$/;

//     const address = await storeContainer
//       .nth(i)
//       .locator('[jstcache="154"]')
//       .nth(1)
//       .textContent();

//     console.log('address', address);

//     shopNameArray.push(
//       await storeContainer.nth(i).getAttribute('aria-label')
//     );

//     if (address) {
//       addressArray.push(address);
//     } else {
//       addressArray.push('Colorado');
//     }
//     if (regex.test(phoneNum1)) {
//       phoneNumArray.push(phoneNum1);
//     } else if (regex.test(phoneNum2)) {
//       phoneNumArray.push(phoneNum2);
//     } else {
//       phoneNumArray.push('not listed');
//     }
//   }
// } catch {
//   await browser.close();
//   retryStrikes2++;
//   if (retryStrikes2 > 3) {
//     retryStrikes2 = 0;
//     return await iteration1(zipCode + 1);
//   } else {
//     return await iteration1(zipCode);
//   }
// }
// retryStrikes2 = 0;
// await page.waitForTimeout(500);

// await browser.close();

// iteration1(zipCode + 1);
